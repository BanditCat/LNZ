////////////////////////////////////////////////////////////////////////////////
// Copyright (c) Jonathan(Jon) DuBois 2013. This file is part of LNZ.         //
//                                                                            //
// LNZ is free software: you can redistribute it and/or modify it under the   //
// terms of the GNU General Public License as published by the Free Software  //
// Foundation, either version 3 of the License, or (at your option) any later //
// version.                                                                   //
//                                                                            //
// LNZ is distributed in the hope that it will be useful, but WITHOUT ANY     //
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  //
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more     //
// details.                                                                   //
//                                                                            //
// You should have received a copy of the GNU General Public License along    //
// with LNZ, located in the file LICENSE.  If not, see                        //
// <http://www.gnu.org/licenses/>.                                            //
//                                                                            //
// Alternative licensing terms may be available for a fee, contact Jon DuBois //
// (bcj1980@gmail.com) for details.                                           //
////////////////////////////////////////////////////////////////////////////////


Occasionally grep through source for BUGBUG, TODO

Write FullInt and StateMachine class, then Tokenizer and Parser.



* 1) Exception-safety: Functions should have either noexcept or throw
  declarations, if this is not possible, then use comments to document exception
  behavior. Unit tests are allowed to throw anything: Test::test catches
  exceptions from subtests.

* 2) Formatting: spaces everywhere, braces on same line, everything 80 columns
  or less. Class names are capitalized and nothing else. Accessor functions
  should begin with letter g. Use punctuation unless its next to variable text
  such as a filename. Avoid assuming 80 columns for output. While writing
  comments do s/we/I/r for the most part.

* 3) Testing: Classes should have a static member test function that is the unit
  test. Place it at the end of the source file for consistency. Make it report
  timing and be sure to thoroughly check edge cases. Calling Test::test calls
  the other unit tests.  In general unit tests should return Strings::gs({
  "nTestsPassed", asString( numTests ) }) or Strings::gs({ "failed!", "<function
  name><unique identifying integer> }).

* 4) Input and output: Use OS::gerr(), OS::gin() and OS::gout() over cerr, cin
  and cout.

* 5) Strings: User-facing strings should go in strings.cpp and be accessed by
  Strings::gs. This makes it easier to internationalize or spell check and saves
  recompiles.

* 6) Versioning: versioning is achieved through git messages. They have the
  format LNZa.bc where a and b are numbers and c is an optional character
  specifing status. windowsResource.rc has the Windows versioning information.
